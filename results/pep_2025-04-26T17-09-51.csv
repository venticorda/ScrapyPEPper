number,name,status
1,PEP Purpose and Guidelines,
8,Style Guide for Python Code,
4,Deprecation of Standard Modules,
10,Voting Guidelines,
7,Style Guide for C Code,
13,Python Language Governance,
12,Sample reStructuredText PEP Template,
2,Procedure for Adding New Modules,
11,CPython platform support,
290,Code Migration and Modernization,
247,API for Cryptographic Hash Functions,
257,Docstring Conventions,
272,API for Block Encryption Algorithms v1.0,
249,Python Database API Specification v2.0,
248,Python Database API Specification v1.0,
218,Adding a Built-In Set Object Type,
287,reStructuredText Docstring Format,
425,Compatibility Tags for Built Distributions,
639,Improving License Clarity with Better Package Metadata,
644,Require OpenSSL 1.1.1 or newer,
613,Explicit Type Aliases,
643,Metadata for Package Source Distributions,
646,Variadic Generics,
634,Structural Pattern Matching: Specification,
632,Deprecate distutils module,
673,Self Type,
283,Python 2.3 Release Schedule,
251,Python 2.2 Release Schedule,
160,Python 1.6 Release Schedule,
200,Python 2.0 Release Schedule,
429,Python 3.4 Release Schedule,
438,Transitioning to release-file hosting on PyPI,
226,Python 2.1 Release Schedule,
449,Removal of the PyPI Mirror Auto Discovery and Naming Scheme,
359,The “make” Statement,
369,Post import hooks,
379,Adding an Assignment Expression,
381,Mirroring infrastructure for PyPI,
382,Namespace Packages,
367,New Super,
365,Adding the pkg_resources module,
377,Allow __enter__() methods to skip the statement body,
8012,The Community Governance Model,
8015,Organization of the Python community,
8014,The Commons Governance Model,
8013,The External Council Governance Model,
8010,The Technical Leader Governance Model,
8011,Python Governance Model Lead by Trio of Pythonistas,
3153,Asynchronous IO support,
3152,Cofunctions,
3146,Merging Unladen Swallow into CPython,
3145,Asynchronous I/O For subprocess.Popen,
3142,Add a “while” clause to generator expressions,
3140,"str(container) should call str(item), not repr(item)",
3139,Cleaning out sys and the “interpreter” module,
3133,Introducing Roles,
3136,Labeled break and continue,
3130,Access to Current Module/Class/Function,
3128,BList: A Faster List-like Type,
3126,Remove Implicit String Concatenation,
3125,Remove Backslash Continuation,
3122,Delineation of the main module,
3117,Postfix type declarations,
3103,A Switch/Case Statement,
760,No More Bare Excepts,
2026,Calendar versioning for Python,
3001,Procedure for reviewing and improving standard library modules,
759,External Wheel Hosting,
756,Add PyUnicode_Export() and PyUnicode_Import() C functions,
754,IEEE 754 Floating Point Special Values,
736,Shorthand syntax for keyword arguments at invocation,
722,Dependency specification for single-file scripts,
724,Stricter Type Guards,
713,Callable Modules,
712,Adding a “converter” parameter to dataclasses.field,
707,A simplified signature for __exit__ and __aexit__,
704,Require virtual environments by default for package installers,
726,Module,
677,Callable Type Syntax,
666,Reject Foolish Indentation,
690,Lazy Imports,
665,A file format to list Python dependencies for reproducibility of an application,
663,"Standardizing Enum str(), repr(), and format() behaviors",
662,Editable installs via virtual wheels,
651,Robust Stack Overflow Handling,
650,Specifying Installer Requirements for Python Projects,
648,Extensible customizations of the interpreter at startup,
642,Explicit Pattern Syntax for Structural Pattern Matching,
645,Allow writing optional types as,
640,Unused variable syntax,
641,Using an underscore in the version portion of Python 3.10 compatibility tags,
637,Support for indexing with keyword arguments,
633,Dependency specification in pyproject.toml using an exploded TOML table,
631,Dependency specification in pyproject.toml based on PEP 508,
620,Hide implementation details from the C API,
622,Structural Pattern Matching,
611,The one million limit,
606,Python Compatibility Version,
608,Coordinated Python release,
601,Forbid return/break/continue breaking out of finally,
605,A rolling feature release stream for CPython,
599,The manylinux2014 Platform Tag,
598,Introducing incremental feature releases,
583,A Concurrency Memory Model for Python,
595,Improving bugs.python.org,
582,Python local packages directory,
580,The C call protocol,
577,Augmented Assignment Expressions,
576,Rationalize Built-in function classes,
575,Unifying function/method classes,
559,Built-in noop(),
571,The manylinux2010 Platform Tag,
558,Defined semantics for locals(),
551,Security transparency in the Python runtime,
555,Context-local variables (contextvars),
554,Multiple Interpreters in the Stdlib,
549,Instance Descriptors,
550,Execution Context,
548,More Flexible Loop Control,
546,Backport ssl.MemoryBIO and ssl.SSLObject to Python 2.7,
543,A Unified TLS API for Python,
542,Dot Notation Assignment In Function Header,
536,Final Grammar for Literal String Interpolation,
531,Existence checking operators,
522,Allow BlockingIOError in security sensitive APIs,
521,Managing global context via ‘with’ blocks in generators and coroutines,
516,Build system abstraction for pip/conda etc,
513,A Platform Tag for Portable Linux Built Distributions,
511,API for code transformers,
504,Using the System RNG by default,
502,String Interpolation - Extended Discussion,
501,General purpose template literal strings,
507,Migrate CPython to Git and GitLab,
510,Specialize functions with guards,
509,Add a private version to dict,
497,A standard mechanism for backward compatibility,
500,A protocol for delegating datetime methods to their tzinfo implementations,
496,Environment Markers,
472,Support for indexing with keyword arguments,
473,Adding structured data to built-in exceptions,
490,Chain exceptions at C level,
474,Creating forge.python.org,
481,"Migrate CPython to Git, Github, and Phabricator",
463,Exception-catching expressions,
469,Migration of dict iteration code to Python 3,
460,Add binary interpolation and formatting,
462,Core development workflow automation for CPython,
459,Standard Metadata Extensions for Python Software Packages,
437,"A DSL for specifying signatures, annotations and argument converters",
455,Adding a key-transforming dictionary to collections,
439,Inclusion of implicit pip bootstrap in Python installation,
432,Restructuring the CPython startup sequence,
433,Easier suppression of file descriptor inheritance,
426,Metadata for Python Software Packages 2.0,
422,Simpler customisation of class creation,
411,Provisional packages in the Python standard library,
416,Add a frozendict builtin type,
413,Faster evolution of the Python Standard Library,
431,Time zone support improvements,
408,Standard library __preview__ package,
410,Use decimal.Decimal type for timestamps,
406,Improved Encapsulation of Import State,
402,Simplified Package Layout and Partitioning,
390,Static metadata for Distutils,
401,BDFL Retirement,
395,Qualified Names for Modules,
396,Module Version Numbers,
386,Changing the version comparison module in Distutils,
364,Transitioning to the Py3K Standard Library,
363,Syntax For Dynamic Attribute Access,
355,Path - Object oriented filesystem paths,
354,Enumerations in Python,
349,Allow str() to return unicode strings,
351,The freeze protocol,
346,User Defined (”,
348,Exception Reorganization for Python 3.0,
350,Codetags,
345,Metadata for Python Software Packages 1.2,
340,Anonymous Block Statements,
344,Exception Chaining and Embedded Tracebacks,
339,Design of the CPython Compiler,
336,Make None Callable,
334,Simple Coroutines via SuspendIteration,
335,Overloadable Boolean Operators,
332,Byte vectors and String/Unicode Unification,
330,Python Bytecode Verification,
329,Treating Builtins as Constants in the Standard Library,
326,A Case for Top and Bottom Values,
325,Resource-Release Support for Generators,
321,Date/Time Parsing and Formatting,
319,Python Synchronize/Asynchronize Block,
317,Eliminate Implicit Exception Instantiation,
315,Enhanced While Loop,
314,Metadata for Python Software Packages 1.1,
313,Adding Roman Numeral Literals to Python,
306,How to Change Python’s Grammar,
310,Reliable Acquisition/Release Pairs,
303,Extend divmod() for Multiple Divisors,
299,Special __main__() function in modules,
304,Controlling Generation of Bytecode Files,
297,Support for System Upgrades,
298,The Locked Buffer Interface,
296,Adding a bytes Object Type,
294,Type Names in the types Module,
295,Interpretation of multiline string constants,
281,Loop Counter Iteration with range and xrange,
284,Integer for-loops,
288,Generators Attributes and Exceptions,
276,Simple Iterator for ints,
291,Backward Compatibility for the Python 2 Standard Library,
275,Switching on Multiple Values,
271,Prefixing sys.path by command line option,
270,uniq method for list objects,
254,Making Classes Look More Like Types,
262,A Database of Installed Python Packages,
266,Optimizing Global Variable/Attribute Access,
265,Sorting Dictionaries by Value,
268,Extended HTTP functionality and WebDAV,
258,Docutils Design Specification,
259,Omit printing newline after newline,
256,Docstring Processing System Framework,
243,Module Repository Upload Mechanism,
239,Adding a Rational Type to Python,
245,Python Interface Syntax,
240,Adding a Rational Literal to Python,
241,Metadata for Python Software Packages,
244,The,
246,Object Adaptation,
242,Numeric Kinds,
231,__findattr__(),
228,Reworking Python’s Numeric Model,
220,"Coroutines, Generators, Continuations",
225,Elementwise/Objectwise Operators,
216,Docstring Format,
224,Attribute Docstrings,
215,String Interpolation,
212,Loop Counter Iteration,
211,Adding A New Outer Product Operator,
210,Decoupling the Interpreter Loop,
209,Multi-dimensional Arrays,
42,Feature Requests,
204,Range Literals,
102,Doing Python Micro Releases,
103,Collecting information about git,
206,Python Advanced Library,
3,Guidelines for Handling Bug Reports,
9,Sample Plaintext PEP Template,
3150,Statement local namespaces (aka “given” clause),
734,Multiple Interpreters in the Stdlib,
3124,"Overloading, Generic Functions, Interfaces, and Adaptation",
3143,Standard daemon process library,
674,Disallow using macros as l-values,
661,Sentinel Values,
568,Generator-sensitivity for Context Variables,
556,Threaded garbage collection,
547,Running extension modules using the -m option,
535,Rich comparison chaining,
534,Improved Errors for Missing Standard Library Modules,
533,Deterministic cleanup for iterators,
532,A circuit breaking protocol and binary operators,
505,None-aware operators,
499,,
491,The Wheel Binary Package Format 1.9,
447,Add __getdescriptor__ method to metaclass,
444,Python Web3 Interface,
407,New release cycle and introducing long-term support versions,
423,Naming conventions and recipes related to packaging,
403,General purpose decorator clause (aka “@in” clause),
419,Protecting cleanup statements from interruptions,
400,Deprecate codecs.StreamReader and codecs.StreamWriter,
368,Standard image protocol and class,
337,Logging Usage in the Standard Library,
316,Programming by Contract for Python,
323,Copyable Iterators,
286,Enhanced Argument Tuples,
280,Optimizing access to globals,
312,Simple Implicit Lambda,
269,Pgen Module for Python,
267,Optimized Access to Module Namespaces,
222,Web Library Enhancements,
219,Stackless Python,
213,Attribute Access Handlers,
233,Python Online Help,
8001,Python Governance Voting Process,
3100,Miscellaneous Python 3.0 Plans,
3099,Things that will Not Change in Python 3000,
569,Python 3.8 Release Schedule,
3003,Python Language Moratorium,
494,Python 3.6 Release Schedule,
3002,Procedure for Backwards-Incompatible Changes,
3000,Python 3000,
581,Using GitHub Issues for CPython,
541,Package Index Name Retention,
537,Python 3.7 Release Schedule,
512,Migrating from hg.python.org to GitHub,
478,Python 3.5 Release Schedule,
464,Removal of the PyPI Mirror Authenticity API,
470,Removing External Hosting Support on PyPI,
398,Python 3.3 Release Schedule,
404,Python 2.8 Un-release Schedule,
392,Python 3.2 Release Schedule,
385,Migrating from Subversion to Mercurial,
375,Python 3.1 Release Schedule,
374,Choosing a distributed VCS for the Python project,
373,Python 2.7 Release Schedule,
361,Python 2.6 and 3.0 Release Schedule,
3155,Qualified name for classes and functions,
5,Guidelines for Language Evolution,
347,Migrating the Python CVS to Subversion,
320,Python 2.4 Release Schedule,
360,Externally Maintained Packages,
3156,Asynchronous IO Support Rebooted: the “asyncio” Module,
356,Python 2.5 Release Schedule,
6,Bug Fix Releases,
3154,Pickle protocol version 4,
3151,Reworking the OS and IO exception hierarchy,
3149,ABI version tagged .so files,
3138,String representation in Python 3000,
3147,PYC Repository Directories,
3141,A Type Hierarchy for Numbers,
3144,IP Address Manipulation Library for the Python Standard Library,
3148,futures - execute computations asynchronously,
3135,New Super,
3137,Immutable Bytes and Mutable Buffer,
3134,Exception Chaining and Embedded Tracebacks,
3131,Supporting Non-ASCII Identifiers,
3132,Extended Iterable Unpacking,
3129,Class Decorators,
3127,Integer Literal Support and Syntax,
3123,Making PyObject_HEAD conform to standard C,
3121,Extension Module Initialization and Finalization,
3120,Using UTF-8 as the default source encoding,
3118,Revising the buffer protocol,
3113,Removal of Tuple Parameter Unpacking,
3119,Introducing Abstract Base Classes,
3115,Metaclasses in Python 3000,
3114,Renaming iterator.next() to iterator.__next__(),
3116,New I/O,
3112,Bytes literals in Python 3000,
3111,Simple input built-in in Python 3000,
3110,Catching Exceptions in Python 3000,
3108,Standard Library Reorganization,
3107,Function Annotations,
3106,"Revamping dict.keys(), .values() and .items()",
3105,Make print a function,
3109,Raising Exceptions in Python 3000,
3102,Keyword-Only Arguments,
3101,Advanced String Formatting,
3104,Access to Names in Outer Scopes,
765,Disallow return/break/continue that exit a finally block,
757,C API to import-export Python integers,
741,Python Configuration C API,
742,Narrowing types with TypeIs,
737,C API to format a type fully qualified name,
738,Adding Android as a supported platform,
735,Dependency Groups in pyproject.toml,
740,Index support for digital attestations,
730,Adding iOS as a supported platform,
723,Inline script metadata,
721,Using tarfile.data_filter for source distribution extraction,
706,Filter for tarfile.extractall,
715,Disabling bdist_egg distribution uploads on PyPI,
705,TypedDict: Read-only items,
702,Marking deprecations using the type system,
709,Inlined comprehensions,
700,Additional Fields for the Simple API for Package Indexes,
698,Override Decorator for Static Typing,
697,Limited C API for Extending Opaque Types,
689,Unstable C API tier,
688,Making the buffer protocol accessible in Python,
692,Using TypedDict for more precise **kwargs typing,
695,Type Parameter Syntax,
696,Type Defaults for Type Parameters,
684,A Per-Interpreter GIL,
683,"Immortal Objects, Using a Fixed Refcount",
682,Format Specifier for Signed Zero,
681,Data Class Transforms,
678,Enriching Exceptions with Notes,
680,tomllib: Support for Parsing TOML in the Standard Library,
675,Arbitrary Literal String Type,
670,Convert macros to functions in the Python C API,
669,Low Impact Monitoring for CPython,
667,Consistent views of namespaces,
660,Editable installs for pyproject.toml based builds (wheel based),
656,Platform Tag for Linux Distributions Using Musl,
655,Marking individual TypedDict items as required or potentially-missing,
657,Include Fine Grained Error Locations in Tracebacks,
652,Maintaining the Stable ABI,
654,Exception Groups and except*,
647,User-Defined Type Guards,
621,Storing project metadata in pyproject.toml,
629,Versioning PyPI’s Simple API,
624,Remove Py_UNICODE encoder APIs,
626,Precise line numbers for debugging and other tools.,
628,Add,
627,Recording installed projects,
623,Remove wstr from Unicode,
618,Add Optional Length-Checking To zip,
617,New PEG parser for CPython,
616,String methods to remove prefixes and suffixes,
610,Recording the Direct URL Origin of installed distributions,
612,Parameter Specification Variables,
614,Relaxing Grammar Restrictions On Decorators,
615,Support for the IANA Time Zone Database in the Standard Library,
604,Allow writing union types as,
600,Future ‘manylinux’ Platform Tags for Portable Linux Built Distributions,
597,Add optional EncodingWarning,
594,Removing dead batteries from the standard library,
593,Flexible function and variable annotations,
592,Adding “Yank” Support to the Simple API,
589,TypedDict: Type Hints for Dictionaries with a Fixed Set of Keys,
591,Adding a final qualifier to typing,
587,Python Initialization Configuration,
586,Literal Types,
585,Type Hinting Generics In Standard Collections,
584,Add Union Operators To dict,
574,Pickle protocol 5 with out-of-band data,
578,Python Runtime Audit Hooks,
570,Python Positional-Only Parameters,
572,Assignment Expressions,
567,Context Variables,
573,Module State Access from C Extension Methods,
566,Metadata for Python Software Packages 2.1,
565,Show DeprecationWarning in __main__,
564,Add new time functions with nanosecond resolution,
562,Module __getattr__ and __dir__,
561,Distributing and Packaging Type Information,
552,Deterministic pycs,
560,Core support for typing module and generic types,
557,Data Classes,
553,Built-in breakpoint(),
544,Protocols: Structural subtyping (static duck typing),
540,Add a new UTF-8 Mode,
539,A New C-API for Thread-Local Storage in CPython,
538,Coercing the legacy C locale to a UTF-8 based locale,
530,Asynchronous Comprehensions,
529,Change Windows filesystem encoding to UTF-8,
527,Removing Un(der)used file types/extensions on PyPI,
528,Change Windows console encoding to UTF-8,
526,Syntax for Variable Annotations,
525,Asynchronous Generators,
524,Make os.urandom() blocking on Linux,
523,Adding a frame evaluation API to CPython,
520,Preserving Class Attribute Definition Order,
517,A build-system independent format for source trees,
519,Adding a file system path protocol,
518,Specifying Minimum Build System Requirements for Python Projects,
515,Underscores in Numeric Literals,
508,Dependency specification for Python Software Packages,
498,Literal String Interpolation,
506,Adding A Secrets Module To The Standard Library,
489,Multi-phase extension module initialization,
495,Local Time Disambiguation,
503,Simple Repository API,
492,Coroutines with async and await syntax,
493,HTTPS verification migration tools for Python 2.7,
488,Elimination of PYO files,
487,Simpler customisation of class creation,
486,Make the Python Launcher aware of virtual environments,
485,A Function for testing approximate equality,
484,Type Hints,
479,Change StopIteration handling inside generators,
476,Enabling certificate verification by default for stdlib http clients,
477,Backport ensurepip (PEP 453) to Python 2.7,
475,Retry system calls failing with EINTR,
466,Network Security Enhancements for Python 2.7.x,
468,Preserving the order of **kwargs in a function.,
471,os.scandir() function – a better and faster directory iterator,
465,A dedicated infix operator for matrix multiplication,
448,Additional Unpacking Generalizations,
454,Add a new tracemalloc module to trace Python memory allocations,
446,Make newly created file descriptors non-inheritable,
453,Explicit bootstrapping of pip in Python installations,
461,Adding % formatting to bytes and bytearray,
450,Adding A Statistics Module To The Standard Library,
456,Secure and interchangeable hash algorithm,
451,A ModuleSpec Type for the Import System,
445,Add new APIs to customize Python memory allocators,
443,Single-dispatch generic functions,
442,Safe object finalization,
440,Version Identification and Dependency Specification,
441,Improving Python ZIP Application Support,
436,The Argument Clinic DSL,
435,Adding an Enum type to the Python standard library,
428,The pathlib module – object-oriented filesystem paths,
427,The Wheel Binary Package Format 1.0,
421,Adding sys.implementation,
424,A method for exposing a length hint,
415,Implement context suppression with exception attributes,
417,Including mock in the Standard Library,
418,"Add monotonic time, performance counter, and process time functions",
414,Explicit Unicode Literal for Python 3.3,
420,Implicit Namespace Packages,
397,Python launcher for Windows,
412,Key-Sharing Dictionary,
405,Python Virtual Environments,
409,Suppressing exception context,
393,Flexible String Representation,
391,Dictionary-Based Configuration For Logging,
384,Defining a Stable ABI,
389,argparse - New Command Line Parsing Module,
380,Syntax for Delegating to a Subgenerator,
383,Non-decodable Bytes in System Character Interfaces,
376,Database of Installed Python Distributions,
372,Adding an ordered dictionary to collections,
378,Format Specifier for Thousands Separator,
371,Addition of the multiprocessing package to the standard library,
366,Main module explicit relative imports,
370,Per user site-packages directory,
362,Function Signature Object,
358,The “bytes” Object,
352,Required Superclass for Exceptions,
357,Allowing Any Object to be Used for Slicing,
353,Using ssize_t as the index type,
343,The “with” Statement,
341,Unifying try-except and try-finally,
342,Coroutines via Enhanced Generators,
338,Executing modules as scripts,
331,Locale-Independent Float/String Conversions,
328,Imports: Multi-Line and Absolute/Relative,
327,Decimal Data Type,
322,Reverse Iteration,
324,subprocess - New process module,
318,Decorators for Functions and Methods,
308,Conditional Expressions,
311,Simplified Global Interpreter Lock Acquisition for Extensions,
309,Partial Function Application,
307,Extensions to the pickle protocol,
305,CSV File API,
302,New Import Hooks,
293,Codec Error Handling Callbacks,
301,Package Index and Metadata for Distutils,Either “success” or “fail”.
289,Generator Expressions,
285,Adding a bool type,
292,Simpler String Substitutions,
282,A Logging System,
279,The enumerate() built-in function,
278,Universal Newline Support,
277,Unicode file name support for Windows NT,
263,Defining Python Source Code Encodings,
264,Future statements in simulated shells,
273,Import Modules from Zip Archives,
274,Dict Comprehensions,
261,Support for “wide” Unicode characters,
260,Simplify xrange(),
255,Simple Generators,
253,Subtyping Built-in Types,
252,Making Types Look More Like Classes,
250,Using site-packages on Windows,
237,Unifying Long Integers and Integers,
238,Changing the Division Operator,
236,Back to the __future__,
235,Import on Case-Insensitive Platforms,
232,Function Attributes,
223,Change the Meaning of,
227,Statically Nested Scopes,
229,Using Distutils to Build Python,
221,Import As,
234,Iterators,
230,Warning Framework,
217,Display Hook for Interactive Use,
208,Reworking the Coercion Model,
207,Rich Comparisons,
214,Extended Print Statement,
203,Augmented Assignments,
202,List Comprehensions,
205,Weak References,
201,Lockstep Iteration,
100,Python Unicode Integration,
789,Preventing task-cancellation bugs by limiting yield in async generators,
787,Safer subprocess usage using t-strings,
785,New methods for easier handling of,
784,Adding Zstandard to the standard library,
783,Emscripten Packaging,
782,Add PyBytesWriter C API,
781,Make,
780,ABI features as environment markers,
779,Criteria for supported status for free-threaded Python,
777,How to Re-invent the Wheel,
775,Make zlib required to build CPython,
773,A Python Installation Manager for Windows,
776,Emscripten Support,
772,Packaging governance process,
774,Removing the LLVM requirement for JIT builds,
771,Default Extras for Python Software Packages,
769,"Add a ‘default’ keyword argument to ‘attrgetter’, ‘itemgetter’ and ‘getitem’",
767,Annotating Read-Only Attributes,
763,Limiting deletions on PyPI,
752,Implicit namespaces for package repositories,
766,Explicit Priority Choices Among Multiple Indexes,
755,Implicit namespace policy for PyPI,
749,Implementing PEP 649,
764,Inlined typed dictionaries,
748,A Unified TLS API for Python,
747,Annotating Type Forms,
746,Type checking Annotated metadata,
743,Add Py_COMPAT_API_VERSION to the Python C API,
728,TypedDict with Typed Extra Items,
744,JIT Compilation,
727,Documentation in Annotated Metadata,
725,Specifying external dependencies in pyproject.toml,
720,Cross-compiling Python packages,
718,Subscriptable functions,
710,Recording the provenance of installed packages,
711,PyBI: a standard format for distributing Python Binaries,
694,Upload 2.0 API for Python Package Indexes,
671,Syntax for late-bound function argument defaults,
679,Allow parentheses in assert statements,
653,Precise Semantics for Pattern Matching,
638,Syntactic Macros,
603,Adding a frozenmap type to collections,
480,Surviving a Compromise of PyPI: End-to-end signing of packages,
467,Minor API improvements for binary sequences,
768,Safe external debugger interface for CPython,
770,Improving measurability of Python packages with Software Bill-of-Materials,
758,Allow,
753,Uniform project URLs in core metadata,
750,Template Strings,
751,A file format to record Python dependencies for installation reproducibility,
714,Rename dist-info-metadata in the Simple API,
739,,
701,Syntactic formalization of f-strings,
699,Remove private dict version field added in PEP 509,
703,Making the Global Interpreter Lock Optional in CPython,
691,JSON-based Simple API for Python Package Indexes,
687,Isolating modules in the standard library,
686,Make UTF-8 mode default,
668,Marking Python base environments as “externally managed”,
685,Comparison of extra names for optional distribution dependencies,
658,Serve Distribution Metadata in the Simple Repository API,
590,Vectorcall: a fast calling protocol for CPython,
625,Filename of a Source Distribution,
563,Postponed Evaluation of Annotations,
458,Secure PyPI downloads with signed repository metadata,
708,Extending the Repository API to Mitigate Dependency Confusion Attacks,
8106,2025 Term Steering Council election,
8102,2021 Term Steering Council election,
8103,2022 Term Steering Council election,
649,Deferred Evaluation Of Annotations Using Descriptors,
8105,2024 Term Steering Council election,
8101,2020 Term Steering Council election,
8104,2023 Term Steering Council election,
745,Python 3.14 Release Schedule,
8100,January 2019 Steering Council election,
8016,The Steering Council Model,
719,Python 3.13 Release Schedule,
8000,Python Language Governance Proposal Overview,
8002,Open Source Governance Survey,
3333,Python Web Server Gateway Interface v1.0.1,
801,Reserved,
762,REPL-acing the default REPL,
733,An Evaluation of Python’s Public C API,
693,Python 3.12 Release Schedule,
672,Unicode-related Security Considerations for Python,
664,Python 3.11 Release Schedule,
659,Specializing Adaptive Interpreter,
636,Structural Pattern Matching: Tutorial,
635,Structural Pattern Matching: Motivation and Rationale,
630,Isolating Extension Modules,
619,Python 3.10 Release Schedule,
607,Reducing CPython’s Feature Delivery Latency,
596,Python 3.9 Release Schedule,
588,GitHub Issues Migration Plan,
579,Refactoring C functions and methods,
514,Python registration in the Windows registry,
483,The Theory of Type Hints,
482,Literature Overview for Type Hints,
457,Notation For Positional-Only Parameters,
452,API for Cryptographic Hash Functions v2.0,
333,Python Web Server Gateway Interface v1.0,
434,IDLE Enhancement Exception for All Branches,
430,Migrating to Python 3 as the default online documentation,
399,Pure Python/C Accelerator Module Compatibility Requirements,
394,The “python” Command on Unix-Like Systems,
20,The Zen of Python,
101,Doing Python Releases 101,
761,Deprecating PGP signatures for CPython artifacts,
732,The Python Documentation Editorial Board,
731,C API Working Group Charter,
676,PEP Infrastructure Process,
729,Typing governance process,
609,Python Packaging Authority (PyPA) Governance,
602,Annual Release Cycle for Python,
545,Python Documentation Translations,
387,Backwards Compatibility Policy,
